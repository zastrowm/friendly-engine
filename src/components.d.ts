/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  Anchor,
  IStoredPositionInfo,
} from './api/layout';
import {
  IUndoCommand,
} from './api/undoCommand';

export namespace Components {
  interface AppRoot {}
  interface ControlContainer {
    'controlType': string;
    'positionInfo': IStoredPositionInfo;
    'uniqueId': string;
  }
  interface ControlEditor {
    /**
    * Transfer the mouse-down to be handled as if the event occured on this element directly.
    */
    'transferMouseDown': (mouseEvent: MouseEvent) => Promise<void>;
  }
  interface DesignApp {}
  interface DesignEditor {
    'addControl': (type: string, id: string, layoutInfo: IStoredPositionInfo) => Promise<void>;
    'addControlNoUndo': (type: string, id: string, layoutInfo: IStoredPositionInfo) => Promise<void>;
    'api': DesignEditor;
    'helpers': {
      selectAndMarkActive: (control: HTMLControlContainerElement, mouseEvent?: MouseEvent) => void;
      getControlContainer: (id: string) => HTMLControlContainerElement;
      getActive: () => HTMLControlContainerElement;
    };
    'removeControl': (id: string) => Promise<void>;
    'removeControlNoUndo': (id: string) => Promise<void>;
  }
  interface DragHandle {
    'anchorMode': Anchor;
  }
}

declare global {


  interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {}
  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };

  interface HTMLControlContainerElement extends Components.ControlContainer, HTMLStencilElement {}
  var HTMLControlContainerElement: {
    prototype: HTMLControlContainerElement;
    new (): HTMLControlContainerElement;
  };

  interface HTMLControlEditorElement extends Components.ControlEditor, HTMLStencilElement {}
  var HTMLControlEditorElement: {
    prototype: HTMLControlEditorElement;
    new (): HTMLControlEditorElement;
  };

  interface HTMLDesignAppElement extends Components.DesignApp, HTMLStencilElement {}
  var HTMLDesignAppElement: {
    prototype: HTMLDesignAppElement;
    new (): HTMLDesignAppElement;
  };

  interface HTMLDesignEditorElement extends Components.DesignEditor, HTMLStencilElement {}
  var HTMLDesignEditorElement: {
    prototype: HTMLDesignEditorElement;
    new (): HTMLDesignEditorElement;
  };

  interface HTMLDragHandleElement extends Components.DragHandle, HTMLStencilElement {}
  var HTMLDragHandleElement: {
    prototype: HTMLDragHandleElement;
    new (): HTMLDragHandleElement;
  };
  interface HTMLElementTagNameMap {
    'app-root': HTMLAppRootElement;
    'control-container': HTMLControlContainerElement;
    'control-editor': HTMLControlEditorElement;
    'design-app': HTMLDesignAppElement;
    'design-editor': HTMLDesignEditorElement;
    'drag-handle': HTMLDragHandleElement;
  }
}

declare namespace LocalJSX {
  interface AppRoot {}
  interface ControlContainer {
    'controlType'?: string;
    'positionInfo'?: IStoredPositionInfo;
    'uniqueId'?: string;
  }
  interface ControlEditor {
    'onUndoEventGenerated'?: (event: CustomEvent<IUndoCommand>) => void;
  }
  interface DesignApp {}
  interface DesignEditor {
    'api'?: DesignEditor;
    'helpers'?: {
      selectAndMarkActive: (control: HTMLControlContainerElement, mouseEvent?: MouseEvent) => void;
      getControlContainer: (id: string) => HTMLControlContainerElement;
      getActive: () => HTMLControlContainerElement;
    };
    'onUndoEventGenerated'?: (event: CustomEvent<IUndoCommand>) => void;
  }
  interface DragHandle {
    'anchorMode'?: Anchor;
  }

  interface IntrinsicElements {
    'app-root': AppRoot;
    'control-container': ControlContainer;
    'control-editor': ControlEditor;
    'design-app': DesignApp;
    'design-editor': DesignEditor;
    'drag-handle': DragHandle;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'app-root': LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
      'control-container': LocalJSX.ControlContainer & JSXBase.HTMLAttributes<HTMLControlContainerElement>;
      'control-editor': LocalJSX.ControlEditor & JSXBase.HTMLAttributes<HTMLControlEditorElement>;
      'design-app': LocalJSX.DesignApp & JSXBase.HTMLAttributes<HTMLDesignAppElement>;
      'design-editor': LocalJSX.DesignEditor & JSXBase.HTMLAttributes<HTMLDesignEditorElement>;
      'drag-handle': LocalJSX.DragHandle & JSXBase.HTMLAttributes<HTMLDragHandleElement>;
    }
  }
}


